---
services:
  # Traefik services:
  # docs: https://doc.traefik.io/traefik/getting-started/quick-start/
  # tutorial: https://www.youtube.com/watch?v=-hfejNXqOzA
  traefik-reverse-proxy:
    image: docker.io/traefik:v3.3.2
    container_name: traefik-reverse-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      # Optional web UI dashboard (enabled by --api.insecure=true). Don't do this in production.
      # - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - qr-app-frontend
  # End of Traefik services

  # Authentik services:
  # docs: https://docs.goauthentik.io/docs/install-config/install/docker-compose
  # tutorial: https://www.youtube.com/watch?v=N5unsATNpJk&t=157s
#   postgresql:
#     image: docker.io/postgres:17.2
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
#       start_period: 20s
#       interval: 30s
#       retries: 5
#       timeout: 5s
#     volumes:
#       - authdb:/var/lib/postgresql/data
#     environment:
#       POSTGRES_PASSWORD: ${PG_PASS:?database password required}
#       POSTGRES_USER: ${PG_USER:-authentik}
#       POSTGRES_DB: ${PG_DB:-authentik}
#     env_file:
#       - .env.dev
#   redis:
#     image: docker.io/redis:7.4.2
#     command: --save 60 1 --loglevel warning
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
#       start_period: 20s
#       interval: 30s
#       retries: 5
#       timeout: 3s
#     volumes:
#       - redis:/data
#   server:
#     image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12.2}
#     restart: unless-stopped
#     command: server
#     environment:
#       AUTHENTIK_REDIS__HOST: redis
#       AUTHENTIK_POSTGRESQL__HOST: postgresql
#       AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
#       AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
#       AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
#     volumes:
#       - ./media:/media
#       - ./custom-templates:/templates
#     env_file:
#       - .env.dev
#     ports:
#       - "${COMPOSE_PORT_HTTP:-9000}:9000"
#       - "${COMPOSE_PORT_HTTPS:-9443}:9443"
#     depends_on:
#       postgresql:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
#   worker:
#     image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12.2}
#     restart: unless-stopped
#     command: worker
#     environment:
#       AUTHENTIK_REDIS__HOST: redis
#       AUTHENTIK_POSTGRESQL__HOST: postgresql
#       AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
#       AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
#       AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
#     # `user: root` and the docker socket volume are optional.
#     # See more for the docker socket integration here:
#     # https://goauthentik.io/docs/outposts/integrations/docker
#     # Removing `user: root` also prevents the worker from fixing the permissions
#     # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
#     # (1000:1000 by default)
#     user: root
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./media:/media
#       - ./certs:/certs
#       - ./custom-templates:/templates
#     env_file:
#       - .env.dev
#     depends_on:
#       postgresql:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
#   # End of Authentik services

# volumes:
#   authdb:
#     driver: local
#   redis:
#     driver: local

networks:
  qr-app-frontend:
    external: true
